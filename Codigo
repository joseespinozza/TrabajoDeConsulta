// Función que implementa el método Simpson 1/3
def integracion(f: Double => Double, a: Double, b: Double): Double = {
  val h: Double = (b - a) / 2              // Paso: mitad del ancho del intervalo
  val xMedio: Double = (a + b) / 2         // Punto medio del intervalo
  (h / 3) * (f(a) + 4 * f(xMedio) + f(b))  // Fórmula de Simpson 1/3
}

// Función para calcular el error absoluto entre el valor esperado y el obtenido.
def calcularError(valorEsperado: Double, valorObtenido: Double): Double = {
  val error: Double = math.abs(valorEsperado - valorObtenido)
  error
}

val vEsperado1: Double = 7.33
val funcion1: Double => Double = (x: Double) => -(math.pow(x, 2)) + 8 * x - 12 // Corrección del tipo
val resultado1: Double = integracion(funcion1, 3, 5) // Uso directo de integración
val error1: Double = calcularError(vEsperado1, resultado1)

// 2. I = ∫b=2 a=0 (3x^2)dx ≅ 8
val vEsperado2: Double = 8
val funcion2: Double => Double = (x: Double) => 3 * math.pow(x, 2)
val resultado2: Double = integracion(funcion2, 0, 2)
val error2: Double = calcularError(vEsperado2, resultado2)

// 3. I = ∫b=1 a=−1(x + 2x^2 − x^3 + 5x^4)dx ≅ 3.333
val vEsperado3: Double = 3.333
val funcion3: Double => Double = (x: Double) => x + 2 * math.pow(x, 2) - math.pow(x, 3) + 5 * math.pow(x, 4)
val resultado3: Double = integracion(funcion3, -1, 1)
val error3: Double = calcularError(vEsperado3, resultado3)

// 4. I = ∫b=2 a=1 (2x + 1) / (x^2 + x)dx ≅ 1.09861
val vEsperado4: Double = 1.09861
val funcion4: Double => Double = (x: Double) => (2 * x + 1) / (math.pow(x, 2) + x)
val resultado4: Double = integracion(funcion4, 1, 2)
val error4: Double = calcularError(vEsperado4, resultado4)

// 5. I = ∫b=1 a=0 (e^x)dx ≅ 1.71828
val vEsperado5: Double = 1.71828
val funcion5: Double => Double = (x: Double) => math.exp(x)
val resultado5: Double = integracion(funcion5, 0, 1)
val error5: Double = calcularError(vEsperado5, resultado5)

// 6. I = ∫b=3 a=2 1/(x − 1)dx ≅ 0.828427
val vEsperado6: Double = 0.828427
val funcion6: Double => Double = (x: Double) => 1 / (math.sqrt(x - 1))
val resultado6: Double = integracion(funcion6, 2, 3)
val error6: Double = calcularError(vEsperado6, resultado6)

// 7. I = ∫b=1 a=0 1/(1 + x^2)dx ≅ 0.785398
val vEsperado7: Double = 0.785398
val funcion7: Double => Double = (x: Double) => 1 / (1 + math.pow(x, 2))
val resultado7: Double = integracion(funcion7, 0, 1)
val error7: Double = calcularError(vEsperado7, resultado7)
